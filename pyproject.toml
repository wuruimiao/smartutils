[tool.poetry]
name = "smartutils-py"
version = "0.0.7"
description = "一个面向中大型项目的Python基础工具库，涵盖配置管理、日志、上下文、ID生成、数据处理、设计模式、定时、异常处理等基础功能。"
authors = ["wuruimiao <dev.wuruimiao@qq.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/wuruimiao/smartutils"
repository = "https://github.com/wuruimiao/smartutils"
keywords = ["utils", "python", "基础工具", "日志", "配置", "ID", "设计模式", "定时"]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[[tool.poetry.packages]]
include = "smartutils"

[tool.poetry.dependencies]
python = "^3.10"
PyYAML = "~6.0.2"
loguru = "~0.7.3"
contextvars = "~2.4"
python-dotenv = "~1.1.0"
orjson = "~3.10.18"
ulid-py = "~1.1.0"
pydantic = "~2.10.6"

sqlalchemy = { version = "~2.0.38", extras = ["asyncio"], optional = true }
asyncmy = { version = "~0.2.10", optional = true }
asyncpg = { version = "~0.30.0", optional = true }

motor = { version = "^3.7.1", optional = true }
beanie = { version = "^1.30.0", optional = true }

redis = { version = "~5.2.1", optional = true }

aiokafka = { version = "~0.12.0", optional = true }
python-snappy = { version = "~0.7.3", optional = true }
zstandard = { version = "~0.23.0", optional = true }

fastapi = { version = "~0.115.11", optional = true }
starlette = { version = "~0.46.2", optional = true }
# includes: uvloop, httptools, websockets, watchgod, python-dotenv
uvicorn = { version = "~0.34.0", extras = ["standard"], optional = true }

django = { version = "~5.2.3", optional = true }

flask = { version = "~3.1.1", optional = true }

bcrypt = { version = "~4.3.0", optional = true }

PyJWT = { version = "~2.10.1", optional = true }

pyotp = { version = "~2.9.0", optional = true }
pillow = { version = "~11.2.1", optional = true }
qrcode = { version = "~8.1", optional = true }

opentelemetry-sdk = { version = "~1.35.0", optional = true }
opentelemetry-instrumentation-fastapi = { version = "~0.56b0", optional = true }
opentelemetry-exporter-otlp = { version = "~1.35.0", optional = true }
opentelemetry-instrumentation-requests = { version = "~0.56b0", optional = true }

#pip install opentelemetry-distro # 开箱即用
filetype = { version = "^1.2.0", optional = true }

uhashring = { version = "~2.4", optional = true }

httpx = { version = "~0.28.1", optional = true }
aiobreaker = { version = "~1.2.0", optional = true }

grpcio = { version = "~1.73.1", optional = true }


[tool.poetry.group.dev.dependencies]
pytest = "~8.3.5"
pytest-cov = "~6.1.1"
pytest-asyncio = "~0.26.0"
pytest-mock = "~3.14.1"
httpx = "~0.28.1"
import-linter = "~2.3"
pydeps = "~3.0.1"
tomlkit = "~0.13.2"
locust = "~2.37.5"
grpcio-tools = "~1.73.1"

[tool.poetry.extras]
mysql = ["sqlalchemy", "asyncmy"]
pgsql = ["sqlalchemy", "asyncpg"]
mongo = ["motor", "beanie"]
redis = ["redis"]
kafka = ["aiokafka", "python-snappy", "zstandard"]
client-http = ["httpx", "aiobreaker"]
client-grpc = ["grpcio", "aiobreaker"]
fastapi = ["fastapi", "starlette", "uvicorn"]
django = ["django"]
flask = ["flask"]
auth = ["bcrypt", "PyJWT", "pyotp", "qrcode", "pillow"]
opentelemetry = [
    "opentelemetry-sdk",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-exporter-otlp",
    "opentelemetry-instrumentation-requests",
]
all = [
    "sqlalchemy",
    "asyncmy",
    "asyncpg",
    "motor",
    "beanie",
    "redis",
    "aiokafka",
    "python-snappy",
    "zstandard",
    "fastapi",
    "starlette",
    "pydantic",
    "uvicorn",
    "django",
    "flask",
    "bcrypt",
    "PyJWT",
    "pyotp",
    "pillow",
    "qrcode",
    "opentelemetry-sdk",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-exporter-otlp",
    "opentelemetry-instrumentation-requests",
    "filetype",
    "uhashring",
    "httpx",
    "aiobreaker",
    "grpcio",
]

[[tool.poetry.source]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
